[{"/Users/hidetakayamamoto/Desktop/Gs/teamDev/album/src/index.js":"1","/Users/hidetakayamamoto/Desktop/Gs/teamDev/album/src/reportWebVitals.js":"2","/Users/hidetakayamamoto/Desktop/Gs/teamDev/album/src/getPhoto.js":"3","/Users/hidetakayamamoto/Desktop/Gs/teamDev/album/src/getPhotoVer2.js":"4","/Users/hidetakayamamoto/Desktop/Gs/teamDev/album/src/App.jsx":"5"},{"size":535,"mtime":1687758747447,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1687758747449,"results":"8","hashOfConfig":"7"},{"size":1267,"mtime":1688179175787,"results":"9","hashOfConfig":"7"},{"size":384,"mtime":1688267952265,"results":"10","hashOfConfig":"7"},{"size":2633,"mtime":1688287896837,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},"d8a5mm",{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},"/Users/hidetakayamamoto/Desktop/Gs/teamDev/album/src/index.js",[],[],[],"/Users/hidetakayamamoto/Desktop/Gs/teamDev/album/src/reportWebVitals.js",[],[],"/Users/hidetakayamamoto/Desktop/Gs/teamDev/album/src/getPhoto.js",["29"],[],"/Users/hidetakayamamoto/Desktop/Gs/teamDev/album/src/getPhotoVer2.js",[],[],"/Users/hidetakayamamoto/Desktop/Gs/teamDev/album/src/App.jsx",["30","31"],[],"// import React from \"react\";\n// import firebase from \"firebase/app\";\n// import { getStorage, ref } from \"https://www.gstatic.com/firebasejs/9.23.0/firebase-storage.js\";\nimport React, { useEffect, useState } from \"react\";\nimport Slider from \"react-slick\";\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\nimport \"firebase/storage\";\nimport { getPhotoUrl } from \"./getPhotoVer2\";\nimport { initializeApp } from \"https://www.gstatic.com/firebasejs/9.23.0/firebase-app.js\";\nimport \"./App.css\";\n\n// 以下FirebaseStorageから画像データを取得\n// FirebaseStorageの設定と初期化\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyD_JBdHTVPMdCnF1kCNdCPeM7BxHKnu8OU\",\n  authDomain: \"pictures-fc50e.firebaseapp.com\",\n  projectId: \"pictures-fc50e\",\n  storageBucket: \"pictures-fc50e.appspot.com\",\n  messagingSenderId: \"1019109300557\",\n  appId: \"1:1019109300557:web:3234142dc98f763a0e7f04\"\n};\n\nconst app = initializeApp(firebaseConfig);\n// firebase.initializeApp(firebaseConfig);\n\nexport default function SimpleSlider() {\n  // photoUrlsという状態変数と、その状態変数を更新するためのsetPhotoUrlsという関数を宣言\n  const [photoUrls, setPhotoUrls] = useState([]);\n\n  useEffect(() => {\n    const fetchPhotoUrls = async () => {\n      const urls = [];\n      const imageNames = [\"photo1.jpg\", \"photo2.jpg\", \"photo3.jpg\", \"photo4.jpg\", \"photo5.jpg\"];\n      for (const imageName of imageNames) {\n        const url = await getPhotoUrl(imageName);\n        urls.push(url);\n      }\n      setPhotoUrls(urls);\n    };\n\n    fetchPhotoUrls();\n  }, []);\n\n\n  // 以下FirebaseStorageから取得した画像をReactSlickでスライダー表示\n\n  const settings = {\n    autoplay: true, //自動再生\n    autoplaySpeed: 3000, //自動再生のスピード\n    dots: true, //スライダー下の点の表示/非表示\n    infinite: true, //無限スクロールの有効/無効\n    speed: 1000, //スライド切り替えの速度\n    slidesToShow: 1, //一度に表示するスライド数\n    slidesToScroll: 1, //一度にスライドする枚数\n    // arrows: true, \n  };\n\n  // indexは配列に入っている順番\n\n  return (\n    <div>\n      <div className=\"title\">\n        <h1>Here's Your Album</h1>\n      </div>\n      <Slider {...settings}>\n        {photoUrls.map((url, index) => (\n          <div>\n            <h2 id=\"head-text\">No.{index + 1}</h2>\n            <div id=\"photo-box\" className={`photo${index + 1}`} key={index} >\n              <img id=\"photo\" src={url} alt={`Photo${index + 1}`} />\n            </div>\n          </div>\n        ))}\n      </Slider>\n    </div>\n  );\n}\n\n\n",{"ruleId":"32","severity":1,"message":"33","line":18,"column":7,"nodeType":"34","messageId":"35","endLine":18,"endColumn":10},{"ruleId":"32","severity":1,"message":"33","line":25,"column":7,"nodeType":"34","messageId":"35","endLine":25,"endColumn":10},{"ruleId":"36","severity":1,"message":"37","line":72,"column":15,"nodeType":"38","endLine":72,"endColumn":69},"no-unused-vars","'app' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement"]